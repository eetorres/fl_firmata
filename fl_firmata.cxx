// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "fl_firmata.h"
static std::string str_var; 

void help_about::cb_Close_i(Fl_Button*, void*) {
  //
  help_win->hide();
}
void help_about::cb_Close(Fl_Button* o, void* v) {
  ((help_about*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

help_about::help_about() {
  { Fl_Double_Window* o = help_win = new Fl_Double_Window(375, 175, "About Fl_Firmata");
    help_win->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(11, 15, 355, 86, "FL_Firmata (0.1) is based on the FLTK library. Feel free to use FL_Firmata co\
de under the terms of the GPL licence.\nCopyright 2013 by Edmanuel Torres\neet\
orres@@gmail.com");
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)55);
      o->align(Fl_Align(160|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(75, 138, 212, 22, "Get FLTK from www.fltk.org.");
      o->align(Fl_Align(133|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { web = new Fl_Output(25, 103, 333, 25);
      web->box(FL_NO_BOX);
      web->color(FL_DARK1);
      web->selection_color(FL_DARK1);
      web->align(Fl_Align(FL_ALIGN_CENTER));
      web->value("https://github.com/eetorres");
    } // Fl_Output* web
    { Fl_Button* o = new Fl_Button(295, 132, 70, 28, "&Close");
      o->box(FL_GLEAM_UP_BOX);
      o->color((Fl_Color)41);
      o->selection_color((Fl_Color)41);
      o->labelcolor((Fl_Color)57);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    o->resizable(NULL);
    help_win->set_modal();
    help_win->end();
  } // Fl_Double_Window* help_win
}

void help_about::show() {
  //
    help_win->show();
}

void fl_firmata::cb_connect_i(Fl_Button*, void*) {
  //
pin_table->send_open_port();
str_var = pin_table->get_status();
status_bar->copy_label((char*)str_var.c_str());
if(pin_table->is_port_open()){
  Fl::add_idle(on_idle_window,(void*)this);
  port_choice->deactivate();
  discon->activate();
  connect->deactivate();
};
}
void fl_firmata::cb_connect(Fl_Button* o, void* v) {
  ((fl_firmata*)(o->parent()->parent()->user_data()))->cb_connect_i(o,v);
}

void fl_firmata::cb_discon_i(Fl_Button*, void*) {
  //
pin_table->send_close_port();
str_var = pin_table->get_status();
status_bar->copy_label((char*)str_var.c_str());
Fl::remove_idle(on_idle_window,(void*)this);
port_choice->activate();
discon->deactivate();
connect->activate();
}
void fl_firmata::cb_discon(Fl_Button* o, void* v) {
  ((fl_firmata*)(o->parent()->parent()->user_data()))->cb_discon_i(o,v);
}

void fl_firmata::cb_Quit_i(Fl_Button*, void*) {
  //
pin_table->send_close_port();
Fl::remove_idle(on_idle_window,(void*)this);
quit();
}
void fl_firmata::cb_Quit(Fl_Button* o, void* v) {
  ((fl_firmata*)(o->parent()->parent()->user_data()))->cb_Quit_i(o,v);
}

void fl_firmata::cb_About_i(Fl_Button*, void*) {
  //
help_about * about = new help_about();
about->show();
}
void fl_firmata::cb_About(Fl_Button* o, void* v) {
  ((fl_firmata*)(o->parent()->parent()->user_data()))->cb_About_i(o,v);
}

void fl_firmata::cb_port_choice_i(Fl_Choice*, void*) {
  //
pin_table->set_port_name((int)port_choice->value());
}
void fl_firmata::cb_port_choice(Fl_Choice* o, void* v) {
  ((fl_firmata*)(o->parent()->parent()->user_data()))->cb_port_choice_i(o,v);
}

fl_firmata::fl_firmata() {
  { firmata_win = new Fl_Double_Window(645, 825, "FL_Firmata_Test");
    firmata_win->box(FL_GLEAM_THIN_UP_BOX);
    firmata_win->color((Fl_Color)48);
    firmata_win->selection_color((Fl_Color)48);
    firmata_win->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 57, 600, 741);
      o->box(FL_BORDER_BOX);
      { pin_table = new Fl_Pin_Table(14, 60, 591, 732);
        pin_table->box(FL_NO_BOX);
        pin_table->color((Fl_Color)48);
        pin_table->selection_color((Fl_Color)48);
        pin_table->labeltype(FL_NORMAL_LABEL);
        pin_table->labelfont(0);
        pin_table->labelsize(14);
        pin_table->labelcolor(FL_FOREGROUND_COLOR);
        pin_table->align(Fl_Align(FL_ALIGN_CENTER));
        pin_table->when(FL_WHEN_RELEASE);
      } // Fl_Pin_Table* pin_table
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, -2, 612, 45);
      { connect = new Fl_Button(12, 13, 62, 20, "Connect");
        connect->box(FL_GLEAM_UP_BOX);
        connect->color((Fl_Color)48);
        connect->selection_color((Fl_Color)48);
        connect->labelfont(4);
        connect->callback((Fl_Callback*)cb_connect);
      } // Fl_Button* connect
      { discon = new Fl_Button(75, 13, 86, 20, "Disconnect");
        discon->box(FL_GLEAM_UP_BOX);
        discon->color((Fl_Color)48);
        discon->selection_color((Fl_Color)48);
        discon->callback((Fl_Callback*)cb_discon);
        discon->deactivate();
      } // Fl_Button* discon
      { Fl_Button* o = new Fl_Button(480, 13, 65, 20, "Quit");
        o->box(FL_GLEAM_UP_BOX);
        o->color((Fl_Color)48);
        o->selection_color((Fl_Color)48);
        o->labelfont(4);
        o->callback((Fl_Callback*)cb_Quit);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(547, 13, 65, 20, "About");
        o->box(FL_GLEAM_UP_BOX);
        o->color((Fl_Color)48);
        o->selection_color((Fl_Color)48);
        o->labelfont(4);
        o->callback((Fl_Callback*)cb_About);
      } // Fl_Button* o
      { port_choice = new Fl_Choice(243, 13, 140, 20, "Serial Port");
        port_choice->box(FL_GLEAM_DOWN_BOX);
        port_choice->down_box(FL_BORDER_BOX);
        port_choice->color((Fl_Color)18);
        port_choice->selection_color((Fl_Color)46);
        port_choice->callback((Fl_Callback*)cb_port_choice);
      } // Fl_Choice* port_choice
      { Fl_Box* o = new Fl_Box(430, 5, 10, 35);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Fl_Box* o = status_bar = new Fl_Box(9, 800, 425, 20);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Box* status_bar
    firmata_win->end();
  } // Fl_Double_Window* firmata_win
  //
  int num;
  bool any=false;
  
  
  str_var = pin_table->get_status();
  status_bar->copy_label((char*)str_var.c_str());
  
  std::vector<std::string> list = pin_table->get_port_list();
  num = list.size();
  printf("board ports %i\n", num);
  for (int i=0; i < num; i++) {
      //printf("%d: port %s\n", i, (const char *)list[i].c_str());
      port_choice->add((const char *)list[i].c_str());
      str_var = pin_table->get_port_name();
      if (pin_table->is_port_open() && !strcmp(str_var.c_str(),list[i].c_str())) {
        port_choice->value(i);
        any = true;
      }
  }
  if(!any){
    port_choice->value(0);
   //pin_table->set_port_name((int)port_choice->value());
  }
  if(num > 0){
    pin_table->set_port_name((int)port_choice->value());
  }
}

void fl_firmata::show() {
  //
    firmata_win->show();
}

void fl_firmata::quit() {
  //
    firmata_win->hide();
}

void fl_firmata::add_pin(int pin, pin_t pint) {
  //printf("pin %i added!\n",pin);
  pin_table->add_pin(pin,pint);
}

void fl_firmata::on_idle_window(void *userdata) {
  std::string s;
  fl_firmata *o = (fl_firmata*)userdata;
  o->pin_table->get_next_data();
  s =o->pin_table->get_status();
  o->status_bar->copy_label((char*)s.c_str());
}
